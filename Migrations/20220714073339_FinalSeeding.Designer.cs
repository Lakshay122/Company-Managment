// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication4.Data;

namespace WebApplication4.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220714073339_FinalSeeding")]
    partial class FinalSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.26");

            modelBuilder.Entity("WebApplication4.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defeats")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fights")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intelligence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Victories")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = 1,
                            Defeats = 0,
                            Defense = 30,
                            Fights = 0,
                            HitPoints = 100,
                            Intelligence = 30,
                            Name = "Frado",
                            Strength = 15,
                            UserId = 1,
                            Victories = 0
                        },
                        new
                        {
                            Id = 2,
                            Class = 2,
                            Defeats = 0,
                            Defense = 40,
                            Fights = 0,
                            HitPoints = 100,
                            Intelligence = 40,
                            Name = "ras",
                            Strength = 20,
                            UserId = 2,
                            Victories = 0
                        });
                });

            modelBuilder.Entity("WebApplication4.Models.CharacterSkill", b =>
                {
                    b.Property<int>("CharaceterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharaceterId", "SkillId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills");

                    b.HasData(
                        new
                        {
                            CharaceterId = 1,
                            SkillId = 2
                        },
                        new
                        {
                            CharaceterId = 2,
                            SkillId = 1
                        },
                        new
                        {
                            CharaceterId = 2,
                            SkillId = 3
                        });
                });

            modelBuilder.Entity("WebApplication4.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Damage = 30,
                            Name = "Fireball"
                        },
                        new
                        {
                            Id = 2,
                            Damage = 20,
                            Name = "Frenchy"
                        },
                        new
                        {
                            Id = 3,
                            Damage = 50,
                            Name = "Blizaard"
                        });
                });

            modelBuilder.Entity("WebApplication4.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Player");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 191, 65, 239, 223, 194, 53, 155, 147, 243, 99, 172, 11, 171, 122, 119, 55, 112, 115, 233, 55, 219, 12, 253, 194, 159, 214, 160, 78, 137, 66, 81, 74, 156, 15, 224, 65, 151, 98, 75, 98, 203, 146, 174, 82, 209, 190, 185, 213, 54, 137, 7, 4, 169, 147, 16, 0, 150, 112, 33, 114, 30, 14, 55, 34 },
                            PasswordSalt = new byte[] { 1, 61, 10, 29, 40, 251, 222, 67, 255, 199, 226, 19, 185, 134, 100, 187, 196, 167, 6, 97, 36, 210, 63, 127, 179, 243, 67, 150, 93, 14, 20, 127, 193, 168, 169, 167, 147, 245, 91, 249, 203, 109, 26, 187, 206, 135, 45, 236, 58, 163, 183, 189, 62, 246, 99, 216, 232, 163, 72, 226, 139, 248, 71, 21, 139, 66, 81, 207, 82, 163, 238, 124, 186, 215, 194, 18, 72, 150, 195, 57, 92, 108, 179, 69, 230, 254, 178, 201, 227, 54, 34, 150, 34, 127, 221, 184, 22, 38, 151, 81, 129, 237, 194, 133, 233, 171, 140, 180, 121, 80, 63, 117, 67, 111, 155, 153, 167, 210, 96, 120, 62, 83, 70, 59, 41, 120, 29, 163 },
                            UserName = "User1"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 191, 65, 239, 223, 194, 53, 155, 147, 243, 99, 172, 11, 171, 122, 119, 55, 112, 115, 233, 55, 219, 12, 253, 194, 159, 214, 160, 78, 137, 66, 81, 74, 156, 15, 224, 65, 151, 98, 75, 98, 203, 146, 174, 82, 209, 190, 185, 213, 54, 137, 7, 4, 169, 147, 16, 0, 150, 112, 33, 114, 30, 14, 55, 34 },
                            PasswordSalt = new byte[] { 1, 61, 10, 29, 40, 251, 222, 67, 255, 199, 226, 19, 185, 134, 100, 187, 196, 167, 6, 97, 36, 210, 63, 127, 179, 243, 67, 150, 93, 14, 20, 127, 193, 168, 169, 167, 147, 245, 91, 249, 203, 109, 26, 187, 206, 135, 45, 236, 58, 163, 183, 189, 62, 246, 99, 216, 232, 163, 72, 226, 139, 248, 71, 21, 139, 66, 81, 207, 82, 163, 238, 124, 186, 215, 194, 18, 72, 150, 195, 57, 92, 108, 179, 69, 230, 254, 178, 201, 227, 54, 34, 150, 34, 127, 221, 184, 22, 38, 151, 81, 129, 237, 194, 133, 233, 171, 140, 180, 121, 80, 63, 117, 67, 111, 155, 153, 167, 210, 96, 120, 62, 83, 70, 59, 41, 120, 29, 163 },
                            UserName = "User2"
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = new byte[] { 191, 65, 239, 223, 194, 53, 155, 147, 243, 99, 172, 11, 171, 122, 119, 55, 112, 115, 233, 55, 219, 12, 253, 194, 159, 214, 160, 78, 137, 66, 81, 74, 156, 15, 224, 65, 151, 98, 75, 98, 203, 146, 174, 82, 209, 190, 185, 213, 54, 137, 7, 4, 169, 147, 16, 0, 150, 112, 33, 114, 30, 14, 55, 34 },
                            PasswordSalt = new byte[] { 1, 61, 10, 29, 40, 251, 222, 67, 255, 199, 226, 19, 185, 134, 100, 187, 196, 167, 6, 97, 36, 210, 63, 127, 179, 243, 67, 150, 93, 14, 20, 127, 193, 168, 169, 167, 147, 245, 91, 249, 203, 109, 26, 187, 206, 135, 45, 236, 58, 163, 183, 189, 62, 246, 99, 216, 232, 163, 72, 226, 139, 248, 71, 21, 139, 66, 81, 207, 82, 163, 238, 124, 186, 215, 194, 18, 72, 150, 195, 57, 92, 108, 179, 69, 230, 254, 178, 201, 227, 54, 34, 150, 34, 127, 221, 184, 22, 38, 151, 81, 129, 237, 194, 133, 233, 171, 140, 180, 121, 80, 63, 117, 67, 111, 155, 153, 167, 210, 96, 120, 62, 83, 70, 59, 41, 120, 29, 163 },
                            UserName = "User3"
                        });
                });

            modelBuilder.Entity("WebApplication4.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacterId = 1,
                            Damage = 20,
                            Name = "AKM"
                        },
                        new
                        {
                            Id = 2,
                            CharacterId = 2,
                            Damage = 100,
                            Name = "awm"
                        });
                });

            modelBuilder.Entity("WebApplication4.Models.Character", b =>
                {
                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication4.Models.CharacterSkill", b =>
                {
                    b.HasOne("WebApplication4.Models.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId");

                    b.HasOne("WebApplication4.Models.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication4.Models.Weapon", b =>
                {
                    b.HasOne("WebApplication4.Models.Character", "Character")
                        .WithOne("Weapon")
                        .HasForeignKey("WebApplication4.Models.Weapon", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
